import { app, BrowserWindow, globalShortcut } from "electron";
import express from "express";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge"s Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
    app.quit();
}

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },

        frame: false,
        kiosk: true
    });

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    mainWindow.webContents.openDevTools();

    let text = "";

    const exp = express();
    exp.use(express.json());
    exp.get("/text", (_req, res) => {
        res.status(200).send(JSON.stringify(text));
    });
    exp.post("/text", (req, res) => {
        text = req.body.text;
        mainWindow.webContents.send("text", text);
        res.status(200).end();
    });
    exp.listen("/tmp/remote-signage.sock");

    globalShortcut.register("CommandOrControl+Q", () => {
        mainWindow.close();
    });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed.
app.on("window-all-closed", () => {
    app.quit();
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
